name: Build Base Images

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: "Python version to build"
        required: false
        default: "3.12"
  push:
    branches: [master]
    paths:
      - "src/mltoolbox/base/**"
      - ".github/workflows/build_base.yml"

permissions:
  contents: read
  packages: write
  actions: write
  checks: write
  deployments: write
  issues: write
  pull-requests: write
  statuses: write

jobs:
  build-matrix:
    strategy:
      matrix:
        include:
          # Regular CUDA builds on x64 runners
          - python_version: "3.10"
            cuda_version: "12.6.3"
            arch: "linux/amd64"
            variant: "cuda"
            runner: "ubuntu-latest"
          - python_version: "3.11"
            cuda_version: "12.6.3"
            arch: "linux/amd64"
            variant: "cuda"
            runner: "ubuntu-latest"
          - python_version: "3.12"
            cuda_version: "12.6.3"
            arch: "linux/amd64"
            variant: "cuda"
            runner: "ubuntu-latest"
          # GH200 build on ARM64 runner
          - python_version: "3.10.12"
            arch: "linux/arm64"
            variant: "gh200"
            runner: "ubuntu-22.04-arm"
    
    runs-on: ${{ matrix.runner }}
    
    steps:
      - uses: actions/checkout@v4

      # Free up disk space (only needed on x64 runners)
      - name: Free up disk space
        if: matrix.arch == 'linux/amd64'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install tomli
        run: pip install tomli

      # Setup NVIDIA Container Toolkit (only for x64 runners)
      - name: Setup NVIDIA Container Toolkit
        if: matrix.arch == 'linux/amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl ca-certificates
          curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | \
            sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
          curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
          sudo apt-get update
          sudo apt-get install -y nvidia-container-toolkit
          sudo nvidia-ctk runtime configure --runtime=docker
          # Try systemctl first, if it fails use service command
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl restart docker || true
          else
            sudo service docker restart || true
          fi

          # If both restart methods fail, we'll kill and start docker daemon directly as a last resort
          if ! docker info >/dev/null 2>&1; then
            sudo killall dockerd || true
            sudo dockerd &
            sleep 5
          fi

          # Verify docker is running
          docker info || echo "Warning: Docker daemon not responding, but continuing anyway..."

      - name: Login to GitHub Container Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Only needed for x64 runners building for ARM64
      - name: Setup QEMU
        if: matrix.arch != runner_arch
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get Version and Metadata
        id: meta
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "python_version=${{ matrix.python_version }}" >> $GITHUB_OUTPUT
          echo "cuda_version=${{ matrix.cuda_version }}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ml-base
          tags: |
            # For regular CUDA builds: py3.12-cuda, py3.11-cuda, etc.
            ${{ matrix.variant == 'cuda' && format('type=raw,value=py{0}-cuda', matrix.python_version) }}
            # For GH200 build: py3.10-gh200
            ${{ matrix.variant == 'gh200' && format('type=raw,value=py{0}-gh200', matrix.python_version) }}
            type=sha

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: src/mltoolbox/base
          file: ${{ matrix.variant == 'gh200' && 'src/mltoolbox/base/Dockerfile.gh200' || 'src/mltoolbox/base/Dockerfile' }}
          platforms: ${{ matrix.arch }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          outputs: type=registry