# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class LaunchInstanceRequest(BaseModel):
    """
    LaunchInstanceRequest
    """ # noqa: E501
    region_name: StrictStr = Field(description="Short name of a region")
    instance_type_name: StrictStr = Field(description="Name of an instance type")
    ssh_key_names: Annotated[List[Annotated[str, Field(strict=True, max_length=64)]], Field(min_length=1, max_length=1)] = Field(description="Names of the SSH keys to allow access to the instances. Currently, exactly one SSH key must be specified.")
    file_system_names: Optional[Annotated[List[StrictStr], Field(max_length=1)]] = Field(default=None, description="Names of the file systems to attach to the instances. Currently, only one (if any) file system may be specified.")
    quantity: Optional[Annotated[int, Field(le=1, strict=True, ge=1)]] = Field(default=1, description="Number of instances to launch")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="User-provided name for the instance")
    __properties: ClassVar[List[str]] = ["region_name", "instance_type_name", "ssh_key_names", "file_system_names", "quantity", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LaunchInstanceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LaunchInstanceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "region_name": obj.get("region_name"),
            "instance_type_name": obj.get("instance_type_name"),
            "ssh_key_names": obj.get("ssh_key_names"),
            "file_system_names": obj.get("file_system_names"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 1,
            "name": obj.get("name")
        })
        return _obj


