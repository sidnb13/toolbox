ARG PYTHON_VERSION
ARG GIT_NAME
ARG GIT_EMAIL
ARG PROJECT_NAME
ARG VARIANT=cuda
ARG ENV_VARIANT=default

FROM ghcr.io/${GIT_NAME}/ml-base:py${PYTHON_VERSION}-${VARIANT}

# Define ENV vars to make ARG values available at runtime
ENV PATH="/usr/local/bin:/root/.local/bin:/opt/conda/bin:${PATH}"
ENV SYSTEM_VARIANT=${VARIANT}
ENV ENV_VARIANT=${ENV_VARIANT}
WORKDIR /workspace/${PROJECT_NAME}

# Setup Git configuration
RUN git config --global user.email "${GIT_EMAIL}" && \
    git config --global user.name "${GIT_NAME}"

# Create necessary directories
RUN mkdir -p /tmp /usr/local/bin

# Create a virtual environment with uv in the current directory
RUN uv venv .venv
ENV PATH="/workspace/${PROJECT_NAME}/.venv/bin:$PATH"

# PROPERLY copy requirements files using COPY
COPY requirements*.lock requirements*.txt ./

# Install from lockfile directly
RUN if [ -f "requirements-${SYSTEM_VARIANT}-${ENV_VARIANT}.lock" ]; then \
    echo "üì¶ Installing dependencies from lockfile..." && \
    uv pip install --no-cache-dir -r "requirements-${SYSTEM_VARIANT}-${ENV_VARIANT}.lock" && \
    touch /.lockfile_installed; \
    else \
    echo "‚ö†Ô∏è No lockfile found for ${SYSTEM_VARIANT}-${ENV_VARIANT} variant"; \
    fi

# Always install ipdb for debugging
RUN uv pip install --no-cache-dir ipdb

COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/bin/ssh-agent", "/usr/local/bin/entrypoint.sh"]
CMD ["zsh"]