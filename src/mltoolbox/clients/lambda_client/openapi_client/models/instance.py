# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.instance_type import InstanceType
from openapi_client.models.region import Region
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    Virtual machine (VM) in Lambda Cloud
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier (ID) of an instance")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="User-provided name for the instance")
    ip: Optional[StrictStr] = Field(default=None, description="IPv4 address of the instance")
    private_ip: Optional[StrictStr] = Field(default=None, description="Private IPv4 address of the instance")
    status: StrictStr = Field(description="The current status of the instance")
    ssh_key_names: List[Annotated[str, Field(strict=True, max_length=64)]] = Field(description="Names of the SSH keys allowed to access the instance")
    file_system_names: List[StrictStr] = Field(description="Names of the file systems, if any, attached to the instance")
    region: Optional[Region] = None
    instance_type: Optional[InstanceType] = None
    hostname: Optional[StrictStr] = Field(default=None, description="Hostname assigned to this instance, which resolves to the instance's IP.")
    jupyter_token: Optional[StrictStr] = Field(default=None, description="Secret token used to log into the jupyter lab server hosted on the instance.")
    jupyter_url: Optional[StrictStr] = Field(default=None, description="URL that opens a jupyter lab notebook on the instance.")
    is_reserved: Optional[StrictBool] = Field(default=None, description="Whether the instance is reserved.")
    __properties: ClassVar[List[str]] = ["id", "name", "ip", "private_ip", "status", "ssh_key_names", "file_system_names", "region", "instance_type", "hostname", "jupyter_token", "jupyter_url", "is_reserved"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'booting', 'unhealthy', 'terminating', 'terminated']):
            raise ValueError("must be one of enum values ('active', 'booting', 'unhealthy', 'terminating', 'terminated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instance_type
        if self.instance_type:
            _dict['instance_type'] = self.instance_type.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if private_ip (nullable) is None
        # and model_fields_set contains the field
        if self.private_ip is None and "private_ip" in self.model_fields_set:
            _dict['private_ip'] = None

        # set to None if hostname (nullable) is None
        # and model_fields_set contains the field
        if self.hostname is None and "hostname" in self.model_fields_set:
            _dict['hostname'] = None

        # set to None if jupyter_token (nullable) is None
        # and model_fields_set contains the field
        if self.jupyter_token is None and "jupyter_token" in self.model_fields_set:
            _dict['jupyter_token'] = None

        # set to None if jupyter_url (nullable) is None
        # and model_fields_set contains the field
        if self.jupyter_url is None and "jupyter_url" in self.model_fields_set:
            _dict['jupyter_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ip": obj.get("ip"),
            "private_ip": obj.get("private_ip"),
            "status": obj.get("status"),
            "ssh_key_names": obj.get("ssh_key_names"),
            "file_system_names": obj.get("file_system_names"),
            "region": Region.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "instance_type": InstanceType.from_dict(obj["instance_type"]) if obj.get("instance_type") is not None else None,
            "hostname": obj.get("hostname"),
            "jupyter_token": obj.get("jupyter_token"),
            "jupyter_url": obj.get("jupyter_url"),
            "is_reserved": obj.get("is_reserved")
        })
        return _obj


