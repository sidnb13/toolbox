# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud

    The version of the OpenAPI document: 1.5.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.instance import Instance

class TestInstance(unittest.TestCase):
    """Instance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Instance:
        """Test Instance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Instance`
        """
        model = Instance()
        if include_optional:
            return Instance(
                id = '0920582c7ff041399e34823a0be62549',
                name = 'training-node-1',
                ip = '198.51.100.2',
                private_ip = '10.0.2.100',
                status = 'active',
                ssh_key_names = [
                    'macbook-pro'
                    ],
                file_system_names = [
                    'shared-fs'
                    ],
                region = openapi_client.models.region.region(
                    name = 'us-tx-1', 
                    description = 'Austin, Texas', ),
                instance_type = openapi_client.models.instance_type.instanceType(
                    name = 'gpu_1x_a100', 
                    description = '1x RTX A100 (24 GB)', 
                    gpu_description = 'RTX A100 (24 GB)', 
                    price_cents_per_hour = 110, 
                    specs = openapi_client.models.instance_type_specs.instanceType_specs(
                        vcpus = 24, 
                        memory_gib = 800, 
                        storage_gib = 512, 
                        gpus = 4, ), ),
                hostname = '10-0-8-196.cloud.lambdalabs.com',
                jupyter_token = '53968f128c4a4489b688c2c0a181d083',
                jupyter_url = 'https://jupyter-3ac4c5c6-9026-47d2-9a33-71efccbcd0ee.lambdaspaces.com/?token=53968f128c4a4489b688c2c0a181d083',
                is_reserved = True
            )
        else:
            return Instance(
                id = '0920582c7ff041399e34823a0be62549',
                status = 'active',
                ssh_key_names = [
                    'macbook-pro'
                    ],
                file_system_names = [
                    'shared-fs'
                    ],
        )
        """

    def testInstance(self):
        """Test Instance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
